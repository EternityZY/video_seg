import argparse

def add_arguments(parser):
    group = parser.add_argument_group(title='Paths Arguments')
    group.add_argument(
            '--result_path',
            type=str,
            required=True,
            default='')
    group.add_argument(
            '--model_save_path',
            type=str,
            required=False,
            default='')
    group = parser.add_argument_group(title='Model Arguments')
    group.add_argument(
            '--mod_last_conv',
            required=False,
            action='store_true',
            default=False)
    group.add_argument(
            '--mod_early_conv',
            required=False,
            action='store_true',
            default=False)
    group.add_argument(
            '--trimmed_mod',
            required=False,
            action = 'store_true',
            default=False)
    group.add_argument(
            '--orig_gb',
            required=False,
            action='store_true',
            default=False)
    group.add_argument(
            '--no_spatial_modulator',
            required=False,
            dest='use_spatial_modulator',
            action='store_false',
            default=True)
    group.add_argument(
            '--spatial_mod_use_bn',
            required=False,
            action='store_true',
            default=False)
    group.add_argument(
            '--visual_mod_no_dropout',
            dest='visual_mod_use_dropout',
            action='store_false',
            default=True,
            required=False)
    group.add_argument(
            '--no_visual_modulator',
            required=False,
            dest='use_visual_modulator',
            action='store_false',
            default=True)
    group.add_argument(
            '--fix_bn',
            required=False,
            action='store_true',
            default=False)
    group.add_argument(
            '--loss_normalize',
            required=False,
            action='store_true',
            default=False)
    ## masktrack params
    # set aligned size to 865, 481 for testing MaskTrack on davis
    group.add_argument(
            '--aligned_size',
            type=int, nargs='+',
            required=False,
            default=None)

    group.add_argument(
            '--fix_seg',
            dest='train_seg',
            required=False,
            action='store_false',
            default=True)
    group.add_argument(
            '--masktrack',
            required=False,
            action='store_true',
            default=False)
    group = parser.add_argument_group(title='Data Argument')
    group.add_argument(
            '--use_prev_guide',
            dest='use_static_guide',
            required=False,
            action='store_false',
            default=True,
            help="""
                only use the first frame as visual guide or use the previous frame as visual guide
                """)
    group.add_argument(
            '--crf_preprocessing',
            dest='crf_preprocessing',
            required=False,
            action='store_true',
            default=False,
            help="""
                whether or not use crf preprocessing 
                """)
    group.add_argument(
            '--crf_postprocessing',
            required=False,
            action='store_true',
            default=False,
            help="""
                whether or not use crf postprocessing
                """)
    group.add_argument(
            '--adaptive_crop_testing',
            required=False,
            action='store_true',
            default=False,
            help="""
                use adaptive croppping around spatial guide to do testing
                """)
    group.add_argument(
            '--no_guide_image_mask',
            dest='guide_image_mask',
            required=False,
            action='store_false',
            default=True)
    group.add_argument(
            '--spatial_guide_random_blank',
            required=False,
            action='store_true',
            default=False)
    group.add_argument(
            '--random_crop_ratio',
            required=False,
            default=0.0,
            type=float)
    group.add_argument(
            '--vg_random_crop_ratio',
            required=False,
            default=0.0,
            type=float)
    group.add_argument(
            '--vg_random_rotate_angle',
            required=False,
            default=0,
            type=int)
    group.add_argument(
            '--motion_blur_prob',
            required=False,
            default=0.0,
            type=float)
    group.add_argument(
            '--batch_size',
            type=int,
            required=False,
            default=8)
    group.add_argument(
            '--save_score',
            required=False,
            action='store_true',
            default=False)
    group = parser.add_argument_group(title='Running Arguments')
    group.add_argument(
            '--gpu_id',
            type=int,
            required=False,
            default=0)
    group.add_argument(
            '--training_iters',
            type=int,
            required=False,
            default=100000)
    group.add_argument(
            '--save_iters',
            type=int,
            required=False,
            default=1000)
    group.add_argument(
            '--learning_rate',
            type=float,
            required=False,
            default=1e-5)
    group.add_argument(
            '--display_iters',
            type=int,
            required=False,
            default=20)
    group.add_argument(
            '--use_image_summary',
            required=False,
            action='store_true',
            default=False,
            help="""
                add valdiation image results to tensorboard
                """)
    group.add_argument(
            '--only_testing',
            required=False,
            action='store_true',
            default=False,
            help="""\
                is it training or testing?
                """)
    group.add_argument(
            '--restart_training',
            dest='resume_training',
            required=False,
            action='store_false',
            default=True)
